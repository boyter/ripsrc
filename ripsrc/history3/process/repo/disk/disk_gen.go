package disk

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BlameData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ib":
			z.IsBinary, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsBinary")
				return
			}
		case "l":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Lines")
				return
			}
			if cap(z.Lines) >= int(zb0002) {
				z.Lines = (z.Lines)[:zb0002]
			} else {
				z.Lines = make([]Line, zb0002)
			}
			for za0001 := range z.Lines {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Lines", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Lines", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "c":
						z.Lines[za0001].Commit, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Lines", za0001, "Commit")
							return
						}
					case "dk":
						z.Lines[za0001].DataKey, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Lines", za0001, "DataKey")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Lines", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BlameData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ib"
	err = en.Append(0x82, 0xa2, 0x69, 0x62)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsBinary)
	if err != nil {
		err = msgp.WrapError(err, "IsBinary")
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Lines)))
	if err != nil {
		err = msgp.WrapError(err, "Lines")
		return
	}
	for za0001 := range z.Lines {
		// map header, size 2
		// write "c"
		err = en.Append(0x82, 0xa1, 0x63)
		if err != nil {
			return
		}
		err = en.WriteString(z.Lines[za0001].Commit)
		if err != nil {
			err = msgp.WrapError(err, "Lines", za0001, "Commit")
			return
		}
		// write "dk"
		err = en.Append(0xa2, 0x64, 0x6b)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Lines[za0001].DataKey)
		if err != nil {
			err = msgp.WrapError(err, "Lines", za0001, "DataKey")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BlameData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ib"
	o = append(o, 0x82, 0xa2, 0x69, 0x62)
	o = msgp.AppendBool(o, z.IsBinary)
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Lines)))
	for za0001 := range z.Lines {
		// map header, size 2
		// string "c"
		o = append(o, 0x82, 0xa1, 0x63)
		o = msgp.AppendString(o, z.Lines[za0001].Commit)
		// string "dk"
		o = append(o, 0xa2, 0x64, 0x6b)
		o = msgp.AppendUint64(o, z.Lines[za0001].DataKey)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlameData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ib":
			z.IsBinary, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsBinary")
				return
			}
		case "l":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lines")
				return
			}
			if cap(z.Lines) >= int(zb0002) {
				z.Lines = (z.Lines)[:zb0002]
			} else {
				z.Lines = make([]Line, zb0002)
			}
			for za0001 := range z.Lines {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lines", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Lines", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "c":
						z.Lines[za0001].Commit, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Lines", za0001, "Commit")
							return
						}
					case "dk":
						z.Lines[za0001].DataKey, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Lines", za0001, "DataKey")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Lines", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlameData) Msgsize() (s int) {
	s = 1 + 3 + msgp.BoolSize + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Lines {
		s += 1 + 2 + msgp.StringPrefixSize + len(z.Lines[za0001].Commit) + 3 + msgp.Uint64Size
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Commit) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "f":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if cap(z.Files) >= int(zb0002) {
				z.Files = (z.Files)[:zb0002]
			} else {
				z.Files = make([]string, zb0002)
			}
			for za0001 := range z.Files {
				z.Files[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Commit) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "f"
	err = en.Append(0x81, 0xa1, 0x66)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Files)))
	if err != nil {
		err = msgp.WrapError(err, "Files")
		return
	}
	for za0001 := range z.Files {
		err = en.WriteString(z.Files[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Files", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Commit) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "f"
	o = append(o, 0x81, 0xa1, 0x66)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Files)))
	for za0001 := range z.Files {
		o = msgp.AppendString(o, z.Files[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Commit) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "f":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if cap(z.Files) >= int(zb0002) {
				z.Files = (z.Files)[:zb0002]
			} else {
				z.Files = make([]string, zb0002)
			}
			for za0001 := range z.Files {
				z.Files[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Commit) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Files {
		s += msgp.StringPrefixSize + len(z.Files[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HashAndData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.Hash, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "d":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HashAndData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "h"
	err = en.Append(0x82, 0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HashAndData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "h"
	o = append(o, 0x82, 0xa1, 0x68)
	o = msgp.AppendUint64(o, z.Hash)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashAndData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.Hash, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "d":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HashAndData) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Line) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.Commit, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Commit")
				return
			}
		case "dk":
			z.DataKey, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DataKey")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Line) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "c"
	err = en.Append(0x82, 0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Commit)
	if err != nil {
		err = msgp.WrapError(err, "Commit")
		return
	}
	// write "dk"
	err = en.Append(0xa2, 0x64, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DataKey)
	if err != nil {
		err = msgp.WrapError(err, "DataKey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Line) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "c"
	o = append(o, 0x82, 0xa1, 0x63)
	o = msgp.AppendString(o, z.Commit)
	// string "dk"
	o = append(o, 0xa2, 0x64, 0x6b)
	o = msgp.AppendUint64(o, z.DataKey)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Line) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.Commit, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Commit")
				return
			}
		case "dk":
			z.DataKey, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataKey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Line) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Commit) + 3 + msgp.Uint64Size
	return
}
